#!/usr/bin/python3

"""
Dependencies that must be installed

sudo apt install python3-pip
sudo pip3 install astral
"""

import sys, time, signal
from datetime import datetime, timedelta
from PyQt5.QtWidgets import QApplication
from PyQt5.QtCore import QTimer

from astral import LocationInfo
from astral.sun import sun, daylight
import pytz

# Setup the Astral constants, the important ones are the time zone and lat/lon
# you can run pytz.common_timezones from a terminal and get a world wide list
# US timezones are 'US/Alaska', 'US/Arizona', 'US/Central', 'US/Eastern',
#'US/Hawaii', 'US/Mountain', 'US/Pacific'
PBTZ = pytz.timezone('US/Central')
PBMO = LocationInfo("Poplar Bluff", "Midwest", "US/Central", 36.873512, -90.488008)

# constants for the relay so it makes more sense reading the code
ON = True
OFF = False

# pretty time constants
HM = '%I:%M %p'
HMS = '%I:%M:%S %p'

class main():
	def __init__(self):
		#exit the program when ctrl c is pressed
		signal.signal(signal.SIGINT, signal.SIG_DFL)

		# Set date on startup
		self.today = datetime.today().date()
		self.lightStatus = False

		self.updateSun()

		# Setup the heartbeat timer to run the update function every 100ms
		# 1 second has 1000 milliseconds
		updateTimer = QTimer()
		updateTimer.timeout.connect(self.update)
		updateTimer.start(100)

	def updateSun(self):
		self.todaySun = sun(PBMO.observer, date=datetime.today(), tzinfo=PBTZ)
		self.lightOn = self.todaySun['dawn']
		self.lightOff = self.todaySun['dawn'] + timedelta(minutes=30)

	def lights(self, action):
		if action == 'ON' and not self.lights:
			print(f'It is {datetime.now(PBTZ).strftime(HMS)} turning on the lights')
			# if you run this on a Rpi this is where you turn the output on
			# gpio.output(LIGHTS, ON)
			self.lightStatus = True
		elif action == 'OFF' and self.lights:
			print(f'It is {datetime.now(PBTZ).strftime(HMS)} turning the lights off')
			# if you run this on a Rpi this is where you turn the output off
			# gpio.output(LIGHTS, OFF)
			self.lightStatus = False

	def update(self):
		# test to see if the date has changed and we need to update the astral info
		if self.today != datetime.today().date(): # see if it's a new day
			print(f"It's a new day, today is {datetime.today().date().strftime('%m,%d %Y')}")
			self.updateSun()
			self.today = datetime.today().date()

		if datetime.now(PBTZ) >= self.lightOn and not self.lightStatus:
			self.lights('ON')
		elif datetime.now(PBTZ) >= self.lightOff and self.lightStatus:
			self.lights('OFF')


if __name__ == '__main__':
	app = QApplication(sys.argv)
	gui = main()
	sys.exit(app.exec_())
